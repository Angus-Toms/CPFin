#include "example.hpp"

#include <chrono>
#include <iostream>
#include "overlays/sma.hpp"
#include "overlays/bollinger.hpp"
#include "timeseries/ar.hpp"
#include "timeseries/ma.hpp"
#include "timeseries/arma.hpp"

#include "priceseries.hpp"

int main() {
  // // Fetch data
  // const auto ps = PriceSeries::getPriceSeries("AAPL", "2020-01-01", "2020-12-31");

  // // Add indicators
  // ps->addRSI();
  // ps->addBollingerBands();

  // // View and export results 
  // ps->plot();
  // ps->exportCSV("aapl.csv");

  std::vector<double> data = {0, 0, 9.780151700108213, 3.186003008743164, 11.441539567542838, 1.9616116566267352, 13.617430822804037, 0.7479709536094892, 15.68422792081074, -1.6552541067968836, 19.44006122472538, -6.43216066059393, 23.067496287535914, -12.20423474497334, 27.827718011407097, -17.449843869999782, 35.621090448676476, -25.12956441836571, 43.72269848828098, -34.348186063189935, 54.453701620696506, -47.05108570908039, 71.52856337979472, -66.01703443154372, 91.94458121844454, -90.24627361772203, 117.86029901120483, -121.2227237807412, 155.85173847014877, -162.66406203140127, 200.3574326223915, -214.89004351930527, 261.9916111767884, -286.3759531938792, 344.85672440337123, -380.610567293251, 453.06110641868963, -506.45856267384363, 596.1535329884141, -667.4457738260281, 781.9332677273675, -883.5140121153054, 1029.7302501235451, -1167.745060378074, 1355.8250736137327, -1542.140652975851, 1785.3184051643657, -2036.5598114844686, 2353.696388949956, -2687.8098522937503, 3101.200974547782, -3546.5250726104277, 4086.598736241455, -4677.046908014762, 5388.010136436736, -6172.0113789041, 7101.959503849962, -8141.692331474879, 9363.514517017853, -10735.802611291121, 12343.558332656954, -14160.054305981268, 16274.251112601369, -18674.323222275427, 21458.284531862802, -24625.55455510505, 28294.938346630985, -32476.25031878532, 37307.60617827428, -42827.28405044616, 49195.168430658945, -56478.516355022475, 64870.38970550891, -74477.27171937386, 85539.58941960533, -98212.29516916658, 112795.73611845875, -129511.12370289156, 148736.1289636761, -170782.74885928724, 196130.18031612714, -225207.4746139203, 258628.93174293987, -296976.32685093174, 341043.7349465382, -391615.40885503154, 449719.2371945078, -516410.8840532008, 593027.8721105419, -680977.2251682347, 782003.2510852074, -897982.1859718887, 1031196.612395033, -1184141.347013031, 1359803.7948095542, -1561490.234069514, 1793123.2353469564, -2059084.7533185703, 2364525.409561031, -2715246.2934739473, 3118016.954894086, -3580503.3810066697};
  AR ar(data);
  ar.train(2);
  std::cout << "AR coeffs:\n";
  for (const auto& phi : ar.getPhis()) {
      std::cout << phi << std::endl;
  }

  std::cout << "\nAR forecast:\n";
  for (const auto& forecast : ar.forecast(5)) {
      std::cout << forecast << std::endl;
  }


  return 0;
}